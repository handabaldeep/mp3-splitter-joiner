
import java.awt.Color;
import java.awt.Container;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author BaldeepSingh
 */
public class SplitterJoiner extends javax.swing.JFrame {

    /**
     * Creates new form SplitterJoiner
     */
    JFileChooser fc = null;
    
    File f = null;
    File[] fo=null;
    File f1 = null;
    File f2 = null;
    File f3 = null;
    File f4 = null;
    File f5 = null;
    File f6 = null;
    String oldf="";
    String[] newf;
    long start=0,end=0,interval=0;
    String fpath1 = "";
    String fpath2 = "";
    String fpath3 = "";
    String fpath4 = "";
    String fpath5 = "";
    String fpath6 = "";
    String newfilename="";
    String newfilepath="";
    String fname1 = "";
    String fname2 = "";
    String fname3 = "";
    String fname4 = "";
    String fname5 = "";
    String fname6 = "";
    String fpath = "";
    int a = 0, i = 0, j = 0, r = 0,nop=0;
    double d = 0, c = 0;
    FileInputStream fis = null;
    FileOutputStream fos = null;
    FileOutputStream[] foso=null;
    byte[] b = null;
    Image icon;

    public SplitterJoiner() {

        initComponents();
        Container ctr = this.getContentPane();
        ctr.setBackground(Color.LIGHT_GRAY);
        icon = Toolkit.getDefaultToolkit().getImage("close.png");
        setIconImage(icon);
        setTitle("MP3 Splitter & Joiner");
        BAdd.setToolTipText("Click to add a file");
        BRemove.setToolTipText("Click to remove selected file");
        BSplitJoin.setToolTipText("Click to Split\\Merge");
        BBrowse.setToolTipText("Set output directory");
        BFindTarget.setToolTipText("Find directory");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TB = new javax.swing.JTabbedPane();
        PSplitter = new javax.swing.JPanel();
        LClipLengthS = new javax.swing.JLabel();
        LLengthS = new javax.swing.JLabel();
        LPartsS = new javax.swing.JLabel();
        CBPartsS = new javax.swing.JComboBox();
        LClipMBS = new javax.swing.JLabel();
        LFileNameS = new javax.swing.JLabel();
        TFFileNameS = new javax.swing.JTextField();
        LFileSizeS = new javax.swing.JLabel();
        LSizeS = new javax.swing.JLabel();
        LMBS = new javax.swing.JLabel();
        LClipNameS = new javax.swing.JLabel();
        LNameS = new javax.swing.JLabel();
        PJoiner = new javax.swing.JPanel();
        SPJ = new javax.swing.JScrollPane();
        TableJ = new javax.swing.JTable();
        TFNewFileJ = new javax.swing.JTextField();
        LNewFileSizeJ = new javax.swing.JLabel();
        LMBJ = new javax.swing.JLabel();
        LNewFileJ = new javax.swing.JLabel();
        LNewSizeJ = new javax.swing.JLabel();
        BAdd = new javax.swing.JButton();
        BRemove = new javax.swing.JButton();
        LOutput = new javax.swing.JLabel();
        TFOutput = new javax.swing.JTextField();
        BBrowse = new javax.swing.JButton();
        BFindTarget = new javax.swing.JButton();
        BSplitJoin = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        LClipLengthS.setText("Clip length:");

        LLengthS.setText("0.00");

        LPartsS.setText("No. of parts:");

        CBPartsS.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2", "3", "4", "5" }));
        CBPartsS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBPartsSActionPerformed(evt);
            }
        });

        LClipMBS.setText("mb");

        LFileNameS.setText("New file's name:");

        TFFileNameS.setText("new");

        LFileSizeS.setText("New file's size:");

        LSizeS.setText("0.00");

        LMBS.setText("mb");

        LClipNameS.setText("Clip name:");

        javax.swing.GroupLayout PSplitterLayout = new javax.swing.GroupLayout(PSplitter);
        PSplitter.setLayout(PSplitterLayout);
        PSplitterLayout.setHorizontalGroup(
            PSplitterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PSplitterLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(PSplitterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(LClipNameS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LFileSizeS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LFileNameS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LPartsS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LClipLengthS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PSplitterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(TFFileNameS, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                    .addGroup(PSplitterLayout.createSequentialGroup()
                        .addComponent(LSizeS)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LMBS))
                    .addComponent(CBPartsS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(PSplitterLayout.createSequentialGroup()
                        .addComponent(LLengthS)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LClipMBS))
                    .addComponent(LNameS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(127, Short.MAX_VALUE))
        );
        PSplitterLayout.setVerticalGroup(
            PSplitterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PSplitterLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(PSplitterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(LClipNameS, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                    .addComponent(LNameS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PSplitterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LClipLengthS, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LLengthS, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LClipMBS, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PSplitterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LPartsS, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CBPartsS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PSplitterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LFileNameS, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TFFileNameS, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PSplitterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LFileSizeS, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LSizeS, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LMBS, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        TB.addTab("Splitter", PSplitter);

        TableJ.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Source", "Name"
            }
        ));
        SPJ.setViewportView(TableJ);

        TFNewFileJ.setText("new");

        LNewFileSizeJ.setText("0.00");

        LMBJ.setText("mb");

        LNewFileJ.setText("New file name:");

        LNewSizeJ.setText("New file size:");

        javax.swing.GroupLayout PJoinerLayout = new javax.swing.GroupLayout(PJoiner);
        PJoiner.setLayout(PJoinerLayout);
        PJoinerLayout.setHorizontalGroup(
            PJoinerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PJoinerLayout.createSequentialGroup()
                .addComponent(SPJ, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(PJoinerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PJoinerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(LNewSizeJ, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LNewFileJ, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PJoinerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TFNewFileJ, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(PJoinerLayout.createSequentialGroup()
                        .addComponent(LNewFileSizeJ, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LMBJ, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PJoinerLayout.setVerticalGroup(
            PJoinerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PJoinerLayout.createSequentialGroup()
                .addComponent(SPJ, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(PJoinerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TFNewFileJ, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LNewFileJ, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PJoinerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LNewFileSizeJ, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LMBJ, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LNewSizeJ, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 25, Short.MAX_VALUE))
        );

        TB.addTab("Joiner", PJoiner);

        BAdd.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        BAdd.setForeground(new java.awt.Color(255, 255, 255));
        BAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add.png"))); // NOI18N
        BAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BAddMouseEntered(evt);
            }
        });
        BAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BAddActionPerformed(evt);
            }
        });

        BRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/remove.png"))); // NOI18N
        BRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BRemoveActionPerformed(evt);
            }
        });

        LOutput.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        LOutput.setText("Output");

        TFOutput.setText("C:\\Users");

        BBrowse.setText("Browse");
        BBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BBrowseActionPerformed(evt);
            }
        });

        BFindTarget.setText("Find Target");
        BFindTarget.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BFindTargetActionPerformed(evt);
            }
        });

        BSplitJoin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/5.jpg"))); // NOI18N
        BSplitJoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BSplitJoinActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(TB, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(LOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(BBrowse)
                                .addGap(18, 18, 18)
                                .addComponent(BFindTarget)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(TFOutput))))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BSplitJoin, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(TB, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TFOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BBrowse)
                            .addComponent(BFindTarget))
                        .addContainerGap(77, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(BRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(85, 85, 85)
                        .addComponent(BSplitJoin, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BAddActionPerformed
        // TODO add your handling code here:

        try {
            fc = new JFileChooser("C:\\Users");
            fc.setFileFilter(new FileFilter() {

                @Override
                public boolean accept(File f) {
                    return f.getPath().endsWith(".mp3");
                }

                @Override
                public String getDescription() {
                    return "Music(mp3) files only";
                }
            });
            a = fc.showOpenDialog(this);
            if (a == JFileChooser.APPROVE_OPTION && PSplitter.isVisible() == true) {
                f1 = fc.getSelectedFile();
                fpath1 = f1.getPath();
                fname1 = f1.getName();
                d = (f1.length()) / (1024 * 1024);
                LNameS.setText(fname1);
                LLengthS.setText(Double.toString(d));
                c = d / (double) (CBPartsS.getSelectedIndex() + 2);
                LSizeS.setText(Double.toString(c));

            } else if (a == JFileChooser.APPROVE_OPTION && PJoiner.isVisible() == true) {
                if (i == 0 || TableJ.getValueAt(0, 0) == "") {
                    f1 = fc.getSelectedFile();
                    fpath1 = f1.getPath();
                    fname1 = f1.getName();
                    TableJ.setValueAt(fpath1, 0, 0);
                    TableJ.setValueAt(fname1, 0, 1);
                    i++;
                    d = d + (f1.length()) / (1024 * 1024);
                    LNewFileSizeJ.setText(Double.toString(d));
                } else if (i == 1 || TableJ.getValueAt(1, 0) == "") {
                    f2 = fc.getSelectedFile();
                    fpath2 = f2.getPath();
                    fname2 = f2.getName();
                    TableJ.setValueAt(fpath2, 1, 0);
                    TableJ.setValueAt(fname2, 1, 1);
                    i++;
                    d = d + (f2.length()) / (1024 * 1024);
                    LNewFileSizeJ.setText(Double.toString(d));
                } else if (i == 2 || TableJ.getValueAt(2, 0) == "") {
                    f3 = fc.getSelectedFile();
                    fpath3 = f3.getPath();
                    fname3 = f3.getName();
                    TableJ.setValueAt(fpath3, 2, 0);
                    TableJ.setValueAt(fname3, 2, 1);
                    i++;
                    d = d + (f3.length()) / (1024 * 1024);
                    LNewFileSizeJ.setText(Double.toString(d));
                } else if (i == 3 || TableJ.getValueAt(3, 0) == "") {
                    f4 = fc.getSelectedFile();
                    fpath4 = f4.getPath();
                    fname4 = f4.getName();
                    TableJ.setValueAt(fpath4, 3, 0);
                    TableJ.setValueAt(fname4, 3, 1);
                    i++;
                    d = d + (f4.length()) / (1024 * 1024);
                    LNewFileSizeJ.setText(Double.toString(d));
                } else if (i == 4 || TableJ.getValueAt(4, 0) == "") {
                    f5 = fc.getSelectedFile();
                    fpath5 = f5.getPath();
                    fname5 = f5.getName();
                    TableJ.setValueAt(fpath5, 4, 0);
                    TableJ.setValueAt(fname5, 4, 1);
                    i++;
                    d = d + (f5.length()) / (1024 * 1024);
                    LNewFileSizeJ.setText(Double.toString(d));
                } else {
                    JOptionPane.showMessageDialog(this, "Not more then 5 files can be joined");
                }

            }
        } catch (Exception e) {
            System.out.println("Error");
        }


    }//GEN-LAST:event_BAddActionPerformed

    private void BBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BBrowseActionPerformed
        // TODO add your handling code here:
        fc = new JFileChooser("C:\\Users");
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        a = fc.showOpenDialog(this);
        if (a == JFileChooser.APPROVE_OPTION) {
            f = fc.getSelectedFile();
            fpath = f.getPath();
            TFOutput.setText(fpath);
        }
    }//GEN-LAST:event_BBrowseActionPerformed

    private void BFindTargetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BFindTargetActionPerformed
        // TODO add your handling code here:
        String target = TFOutput.getText();
        fc = new JFileChooser(target);
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        a = fc.showOpenDialog(this);
        if (a == JFileChooser.APPROVE_OPTION) {
            f = fc.getSelectedFile();
            fpath = f.getPath();
            TFOutput.setText(fpath);
        }
    }//GEN-LAST:event_BFindTargetActionPerformed

    private void BSplitJoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BSplitJoinActionPerformed
        // TODO add your handling code here:

        try {
            if (PSplitter.isVisible() == true) {
                nop= Integer.parseInt(CBPartsS.getSelectedItem().toString());
                fis=new FileInputStream(f1);
                foso=new FileOutputStream[nop];
                fo=new File[nop];
                newf=new String[nop];
                newfilename=TFFileNameS.getText();
                newfilepath=TFOutput.getText();
                interval=f1.length()/nop;
                start=0;
                end=interval;
                b=new byte[1];
                for (int k = 0; k < nop; k++) {
                    newf[k]=newfilepath+"\\"+newfilename+k+".mp3";
                    fo[k]=new File(newf[k]);
                    foso[k]=new FileOutputStream(fo[k]);
                    for (long l =  start; l < end; l++) {
                        fis.read(b);
                        foso[k].write(b); 
                    }
                    foso[k].flush();
                    foso[k].close();
                    start=end;
                    end=end+interval;
                }
                JOptionPane.showMessageDialog(this,"File Splitted into "+ nop +" parts");
            }
            if (PJoiner.isVisible() == true) {
                fname6 = TFNewFileJ.getText();
                fpath6 = TFOutput.getText();
                f6 = new File(fpath6+"\\"+fname6+".mp3");
                if (i == 2) {
                    fis = new FileInputStream(f1);
                    fos = new FileOutputStream(f6, true);
                    b = new byte[1000];
                    j = 0;
                    while ((j = fis.read(b)) != -1) {
                        fos.write(b);
                    }
                    fis.close();
                    fis = new FileInputStream(f2);
                    b = new byte[1000];
                    j = 0;
                    while ((j = fis.read(b)) != -1) {
                        fos.write(b);
                    }
                    fis.close();
                    fos.flush();
                    fos.close();
                    JOptionPane.showMessageDialog(this, "2 files joined succesfully");
                } else if (i == 3) {
                    fis = new FileInputStream(f1);
                    fos = new FileOutputStream(f6, true);
                    b = new byte[1000];
                    j = 0;
                    while ((j = fis.read(b)) != -1) {
                        fos.write(b);
                    }
                    fis.close();
                    fis = new FileInputStream(f2);
                    b = new byte[1000];
                    j = 0;
                    while ((j = fis.read(b)) != -1) {
                        fos.write(b);
                    }
                    fis = new FileInputStream(f3);
                    b = new byte[1000];
                    j = 0;
                    while ((j = fis.read(b)) != -1) {
                        fos.write(b);
                    }
                    fis.close();
                    fos.flush();
                    fos.close();
                    JOptionPane.showMessageDialog(this, "3 files joined succesfully");
                } else if (i == 4) {
                    fis = new FileInputStream(f1);
                    fos = new FileOutputStream(f6, true);
                    b = new byte[1000];
                    j = 0;
                    while ((j = fis.read(b)) != -1) {
                        fos.write(b);
                    }
                    fis.close();
                    fis = new FileInputStream(f2);
                    b = new byte[1000];
                    j = 0;
                    while ((j = fis.read(b)) != -1) {
                        fos.write(b);
                    }
                    fis = new FileInputStream(f3);
                    b = new byte[1000];
                    j = 0;
                    while ((j = fis.read(b)) != -1) {
                        fos.write(b);
                    }
                    fis = new FileInputStream(f4);
                    b = new byte[1000];
                    j = 0;
                    while ((j = fis.read(b)) != -1) {
                        fos.write(b);
                    }
                    fis.close();
                    fos.flush();
                    fos.close();
                    JOptionPane.showMessageDialog(this, "4 files joined succesfully");
                } else if (i == 5) {
                    fis = new FileInputStream(f1);
                    fos = new FileOutputStream(f6, true);
                    b = new byte[1000];
                    j = 0;
                    while ((j = fis.read(b)) != -1) {
                        fos.write(b);
                    }
                    fis.close();
                    fis = new FileInputStream(f2);
                    b = new byte[1000];
                    j = 0;
                    while ((j = fis.read(b)) != -1) {
                        fos.write(b);
                    }
                    fis = new FileInputStream(f3);
                    b = new byte[1000];
                    j = 0;
                    while ((j = fis.read(b)) != -1) {
                        fos.write(b);
                    }
                    fis = new FileInputStream(f4);
                    b = new byte[1000];
                    j = 0;
                    while ((j = fis.read(b)) != -1) {
                        fos.write(b);
                    }
                    fis = new FileInputStream(f5);
                    b = new byte[1000];
                    j = 0;
                    while ((j = fis.read(b)) != -1) {
                        fos.write(b);
                    }
                    fis.close();
                    fos.flush();
                    fos.close();
                    JOptionPane.showMessageDialog(this, "5 files joined succesfully");
                } else {
                    JOptionPane.showMessageDialog(this, "2 or more files must be added", "Alert", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (Exception e) {
            System.out.println(e);
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_BSplitJoinActionPerformed

    private void BRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BRemoveActionPerformed
        // TODO add your handling code here:
        if (PSplitter.isVisible() == true) {
            LNameS.setText("");
            LLengthS.setText("0.00");
            TFFileNameS.setText("new");
            LSizeS.setText("0.00");
        } else if (PJoiner.isVisible() == true) {
            r = TableJ.getSelectedRow();
            TableJ.setValueAt("", r, 0);
            TableJ.setValueAt("", r, 1);
            i--;
            if (r == 0) {
                d = d - (f1.length()) / (1024 * 1024);
                LNewFileSizeJ.setText(Double.toString(d));
            } else if (r == 1) {
                d = d - (f2.length()) / (1024 * 1024);
                LNewFileSizeJ.setText(Double.toString(d));
            } else if (r == 2) {
                d = d - (f3.length()) / (1024 * 1024);
                LNewFileSizeJ.setText(Double.toString(d));
            } else if (r == 3) {
                d = d - (f4.length()) / (1024 * 1024);
                LNewFileSizeJ.setText(Double.toString(d));
            } else if (r == 4) {
                d = d - (f5.length()) / (1024 * 1024);
                LNewFileSizeJ.setText(Double.toString(d));
            }
        }
    }//GEN-LAST:event_BRemoveActionPerformed

    private void BAddMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BAddMouseEntered
        // TODO add your handling code here:

    }//GEN-LAST:event_BAddMouseEntered

    private void CBPartsSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBPartsSActionPerformed
        // TODO add your handling code here:
        c = d / (double) (CBPartsS.getSelectedIndex() + 2);
        LSizeS.setText(Double.toString(c));
    }//GEN-LAST:event_CBPartsSActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SplitterJoiner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SplitterJoiner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SplitterJoiner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SplitterJoiner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SplitterJoiner().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BAdd;
    private javax.swing.JButton BBrowse;
    private javax.swing.JButton BFindTarget;
    private javax.swing.JButton BRemove;
    private javax.swing.JButton BSplitJoin;
    private javax.swing.JComboBox CBPartsS;
    private javax.swing.JLabel LClipLengthS;
    private javax.swing.JLabel LClipMBS;
    private javax.swing.JLabel LClipNameS;
    private javax.swing.JLabel LFileNameS;
    private javax.swing.JLabel LFileSizeS;
    private javax.swing.JLabel LLengthS;
    private javax.swing.JLabel LMBJ;
    private javax.swing.JLabel LMBS;
    private javax.swing.JLabel LNameS;
    private javax.swing.JLabel LNewFileJ;
    private javax.swing.JLabel LNewFileSizeJ;
    private javax.swing.JLabel LNewSizeJ;
    private javax.swing.JLabel LOutput;
    private javax.swing.JLabel LPartsS;
    private javax.swing.JLabel LSizeS;
    private javax.swing.JPanel PJoiner;
    private javax.swing.JPanel PSplitter;
    private javax.swing.JScrollPane SPJ;
    private javax.swing.JTabbedPane TB;
    private javax.swing.JTextField TFFileNameS;
    private javax.swing.JTextField TFNewFileJ;
    private javax.swing.JTextField TFOutput;
    private javax.swing.JTable TableJ;
    // End of variables declaration//GEN-END:variables
}
